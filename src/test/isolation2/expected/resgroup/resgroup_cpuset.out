-- start_ignore
DROP VIEW IF EXISTS busy;
DROP VIEW
DROP VIEW IF EXISTS cancel_all;
DROP VIEW
DROP TABLE IF EXISTS bigtable;
DROP TABLE
CREATE LANGUAGE plpython3u;
CREATE
-- end_ignore

CREATE TABLE bigtable AS SELECT i AS c1, 'abc' AS c2 FROM generate_series(1,50000) i;
SELECT 50000

CREATE OR REPLACE FUNCTION get_cpu_cores() RETURNS INTEGER AS $$ import os return os.cpu_count() $$ LANGUAGE plpython3u;
CREATE FUNCTION

CREATE VIEW busy AS SELECT count(*) FROM bigtable t1, bigtable t2, bigtable t3, bigtable t4, bigtable t5 WHERE 0 = (t1.c1 % 2 + 10000)! AND 0 = (t2.c1 % 2 + 10000)! AND 0 = (t3.c1 % 2 + 10000)! AND 0 = (t4.c1 % 2 + 10000)! AND 0 = (t5.c1 % 2 + 10000)! ;
CREATE VIEW

CREATE VIEW cancel_all AS SELECT pg_cancel_backend(pid) FROM pg_stat_activity WHERE query LIKE 'SELECT * FROM busy%';
CREATE VIEW

-- The test cases for the value of gp_resource_group_cpu_limit equals 0.9,
-- do not change it during the test.
show gp_resource_group_cpu_limit;
 gp_resource_group_cpu_limit 
-----------------------------
 0.9                         
(1 row)

CREATE RESOURCE GROUP rg1_cpuset_test WITH (cpuset='0');
CREATE RESOURCE GROUP
CREATE ROLE role1_cpuset_test RESOURCE GROUP rg1_cpuset_test;
CREATE ROLE

GRANT ALL ON busy TO role1_cpuset_test;
GRANT

-- we suppose core 0 & 1 are available

10: SET ROLE TO role1_cpuset_test;
SET
10: BEGIN;
BEGIN
10&: SELECT * FROM busy;  <waiting ...>

select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: BEGIN;
BEGIN
11: SELECT check_cpuset('rg1_cpuset_test', '0');
 check_cpuset 
--------------
 t            
(1 row)

ALTER RESOURCE GROUP rg1_cpuset_test SET cpuset '1';
ALTER RESOURCE GROUP
select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: SELECT check_cpuset('rg1_cpuset_test', '1');
 check_cpuset 
--------------
 t            
(1 row)

ALTER RESOURCE GROUP rg1_cpuset_test SET cpuset '0,1';
ALTER RESOURCE GROUP
select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: SELECT check_cpuset('rg1_cpuset_test', '0,1');
 check_cpuset 
--------------
 t            
(1 row)
11: END;
COMMIT

-- change to cpu_max_percent while the transaction is running
ALTER RESOURCE GROUP rg1_cpuset_test SET cpu_max_percent 70;
ALTER RESOURCE GROUP

-- cancel the transaction
-- start_ignore
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t                 
(1 row)

10<:  <... completed>
ERROR:  canceling statement due to user request
10q: ... <quitting>
11q: ... <quitting>
-- end_ignore

-- test whether the cpu_max_percent had taken effect
10: SET ROLE TO role1_cpuset_test;
SET
10: BEGIN;
BEGIN
10&: SELECT * FROM busy;  <waiting ...>

select pg_sleep(2);
 pg_sleep 
----------
          
(1 row)

11: BEGIN;
BEGIN
11: SELECT check_cpuset('rg1_cpuset_test', '');
 check_cpuset 
--------------
 t            
(1 row)

-- cancel the transaction
-- start_ignore
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t                 
(1 row)

10<:  <... completed>
ERROR:  canceling statement due to user request
10q: ... <quitting>
11q: ... <quitting>
-- end_ignore

-- test cpu_usage
10: SET ROLE TO role1_cpuset_test;
SET
10: BEGIN;
BEGIN
10&: SELECT * FROM busy;  <waiting ...>

select pg_sleep(5);
 pg_sleep 
----------
          
(1 row)

11: BEGIN;
BEGIN
11: select max(cpu_usage)::float >= 65 * 0.9 from gp_toolkit.gp_resgroup_status_per_host where groupname='rg1_cpuset_test';
 ?column? 
----------
 t        
(1 row)
-- cancel the transaction
-- start_ignore
select * from cancel_all;
 pg_cancel_backend 
-------------------
 t                 
(1 row)

10<:  <... completed>
ERROR:  canceling statement due to user request
10q: ... <quitting>
11q: ... <quitting>
-- end_ignore

-- positive: cgroup cpuset must correspond to config cpuset
-- default group value must be valid
-- suppose the cores numbered 0 & 1 are available
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
CREATE RESOURCE GROUP rg1_test_group WITH (cpuset='0');
CREATE RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
CREATE RESOURCE GROUP rg2_test_group WITH (cpuset='1');
CREATE RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
ALTER RESOURCE GROUP rg1_test_group SET cpu_max_percent 1;
ALTER RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
ALTER RESOURCE GROUP rg1_test_group SET cpuset '0';
ALTER RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
ALTER RESOURCE GROUP rg1_test_group SET cpu_max_percent 1;
ALTER RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
DROP RESOURCE GROUP rg1_test_group;
DROP RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
DROP RESOURCE GROUP rg2_test_group;
DROP RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
-- positive: create a resource group contains all cpu core
-- the minimum numbered core left in default cpuset group
SELECT create_allcores_group('rg1_test_group');
 create_allcores_group 
-----------------------
 t                     
(1 row)
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
DROP RESOURCE GROUP rg1_test_group;
DROP RESOURCE GROUP
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
-- negative: simulate DDL fail
-- create fail
SELECT gp_inject_fault('create_resource_group_fail', 'error', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
CREATE RESOURCE GROUP rg1_test_group WITH (cpuset='0');
ERROR:  fault triggered, fault name:'create_resource_group_fail' fault type:'error'
SELECT groupid, groupname, cpuset FROM gp_toolkit.gp_resgroup_config WHERE cpuset != '-1';
 groupid | groupname | cpuset 
---------+-----------+--------
(0 rows)
SELECT check_cpuset_rules();
 check_cpuset_rules 
--------------------
 t                  
(1 row)
SELECT gp_inject_fault('create_resource_group_fail', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-- start_ignore
DROP RESOURCE GROUP rg1_test_group;
ERROR:  resource group "rg1_test_group" does not exist
-- end_ignore

-- test segment/coordinator cpuset
CREATE RESOURCE GROUP rg_multi_cpuset1 WITH (concurrency=2, cpuset='0;0');
CREATE RESOURCE GROUP
ALTER RESOURCE GROUP rg_multi_cpuset1 set CPUSET '1;1';
ALTER RESOURCE GROUP
select groupname,cpuset from gp_toolkit.gp_resgroup_config where groupname='rg_multi_cpuset1';
 groupname        | cpuset 
------------------+--------
 rg_multi_cpuset1 | 1;1    
(1 row)

DROP RESOURCE GROUP rg_multi_cpuset1;
DROP RESOURCE GROUP

REVOKE ALL ON busy FROM role1_cpuset_test;
REVOKE
DROP ROLE role1_cpuset_test;
DROP ROLE
DROP RESOURCE GROUP rg1_cpuset_test;
DROP RESOURCE GROUP
DROP FUNCTION check_cpuset_rules();
DROP FUNCTION
DROP FUNCTION check_cpuset(TEXT, TEXT);
DROP FUNCTION
DROP FUNCTION create_allcores_group(TEXT);
DROP FUNCTION
DROP VIEW cancel_all;
DROP VIEW
DROP VIEW busy;
DROP VIEW
DROP TABLE bigtable;
DROP TABLE
