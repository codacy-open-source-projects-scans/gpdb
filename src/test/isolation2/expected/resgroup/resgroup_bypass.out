-- TEST BYPASS

-- start_ignore
DROP TABLE t_bypass;
ERROR:  table "t_bypass" does not exist
DROP ROLE role_bypass;
ERROR:  role "role_bypass" does not exist
DROP RESOURCE GROUP rg_bypass;
ERROR:  resource group "rg_bypass" does not exist
-- end_ignore

-- create a resource group with concurrency = 1.
CREATE RESOURCE GROUP rg_bypass WITH(cpu_max_percent=20, concurrency=1);
CREATE RESOURCE GROUP
CREATE ROLE role_bypass RESOURCE GROUP rg_bypass;
CREATE ROLE

SET ROLE role_bypass;
SET
CREATE TABLE t_bypass(a int) distributed by (a);
CREATE TABLE
RESET ROLE;
RESET

-- Session1: pure-catalog query will be unassigned and bypassed.
1: SET ROLE role_bypass;
SET
1: SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'suspend', 1, current_setting('gp_session_id')::int);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1&: SELECT relname FROM pg_class WHERE relname = 't_bypass';  <waiting ...>
SELECT gp_wait_until_triggered_fault('check_and_unassign_from_resgroup_entry', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

2: SET ROLE role_bypass;
SET
2&: BEGIN;  <waiting ...>

SELECT gp_inject_fault('func_init_plan_end', 'suspend', 1, sess_id) FROM pg_stat_activity WHERE rsgname = 'rg_bypass' AND wait_event_type is null;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

2<:  <... completed>
BEGIN
2: COMMIT;
COMMIT

SELECT gp_inject_fault('func_init_plan_end', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

1<:  <... completed>
 relname  
----------
 t_bypass 
(1 row)
1q: ... <quitting>
2q: ... <quitting>

1: SET ROLE role_bypass;
SET
1: SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'suspend', 1, current_setting('gp_session_id')::int);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1&: SELECT 1;  <waiting ...>
SELECT gp_wait_until_triggered_fault('check_and_unassign_from_resgroup_entry', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

2: SET ROLE role_bypass;
SET
2&: BEGIN;  <waiting ...>

SELECT gp_inject_fault('func_init_plan_end', 'suspend', 1, sess_id) FROM pg_stat_activity WHERE rsgname = 'rg_bypass' AND wait_event_type is null;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

2<:  <... completed>
BEGIN
2: COMMIT;
COMMIT

SELECT gp_inject_fault('func_init_plan_end', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

1<:  <... completed>
 ?column? 
----------
 1        
(1 row)
1q: ... <quitting>
2q: ... <quitting>

-- Test cases for direct dispatch plan bypass (unassign).
1: SET ROLE role_bypass;
SET
1: SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'suspend', 1, current_setting('gp_session_id')::int);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1&: INSERT INTO t_bypass VALUES (1);  <waiting ...>
SELECT gp_wait_until_triggered_fault('check_and_unassign_from_resgroup_entry', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

2: SET ROLE role_bypass;
SET
2&: BEGIN;  <waiting ...>

SELECT gp_inject_fault('func_init_plan_end', 'suspend', 1, sess_id) FROM pg_stat_activity WHERE rsgname = 'rg_bypass' AND wait_event_type is null;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

2<:  <... completed>
BEGIN
2: COMMIT;
COMMIT

SELECT gp_inject_fault('func_init_plan_end', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

1<:  <... completed>
INSERT 0 1
1q: ... <quitting>
2q: ... <quitting>

1: SET ROLE role_bypass;
SET
1: SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'suspend', 1, current_setting('gp_session_id')::int);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1&: SELECT * FROM t_bypass where a = 1;  <waiting ...>
SELECT gp_wait_until_triggered_fault('check_and_unassign_from_resgroup_entry', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

2: SET ROLE role_bypass;
SET
2&: BEGIN;  <waiting ...>

SELECT gp_inject_fault('func_init_plan_end', 'suspend', 1, sess_id) FROM pg_stat_activity WHERE rsgname = 'rg_bypass' AND wait_event_type is null;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

2<:  <... completed>
BEGIN
2: COMMIT;
COMMIT

SELECT gp_inject_fault('func_init_plan_end', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

1<:  <... completed>
 a 
---
 1 
(1 row)
1q: ... <quitting>
2q: ... <quitting>

-- before this line the min_cost is 0, so bypass using
-- min_cost will not work for above.
-- alter resource group's min_cost
ALTER RESOURCE GROUP rg_bypass SET min_cost 500;
ALTER RESOURCE GROUP
ANALYZE t_bypass;
ANALYZE
-- Session1: for quries with cost under the min_cost limit, they will be unassigned and bypassed.
1: SET gp_resource_group_bypass_direct_dispatch = 0;
SET
1: SET ROLE role_bypass;
SET
1: SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'suspend', 1, current_setting('gp_session_id')::int);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1&: SELECT * FROM t_bypass where a = 1;  <waiting ...>
SELECT gp_wait_until_triggered_fault('check_and_unassign_from_resgroup_entry', 1, 1);
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

2: SET ROLE role_bypass;
SET
2&: BEGIN;  <waiting ...>

SELECT gp_inject_fault('func_init_plan_end', 'suspend', 1, sess_id) FROM pg_stat_activity WHERE rsgname = 'rg_bypass' AND wait_event_type is null;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

SELECT gp_inject_fault('check_and_unassign_from_resgroup_entry', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

2<:  <... completed>
BEGIN
2: COMMIT;
COMMIT

SELECT gp_inject_fault('func_init_plan_end', 'reset', 1);
 gp_inject_fault 
-----------------
 Success:        
(1 row)

1<:  <... completed>
 a 
---
 1 
(1 row)
1q: ... <quitting>
2q: ... <quitting>

-- cleanup
-- start_ignore
DROP TABLE t_bypass;
DROP TABLE
DROP ROLE role_bypass;
DROP ROLE
DROP RESOURCE GROUP rg_bypass;
DROP RESOURCE GROUP
-- end_ignore
