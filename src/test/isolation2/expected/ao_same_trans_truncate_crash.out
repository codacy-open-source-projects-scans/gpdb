-- setup
-- Set fsync on since we need to test the fsync code logic.
!\retcode gpconfig -c fsync -v on --skipvalidation;
-- start_ignore

-- end_ignore
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore

-- end_ignore
(exited with code 0)
-- skip FTS probes to avoid segment being marked down on restart
SELECT gp_inject_fault_infinite('fts_probe', 'skip', dbid) FROM gp_segment_configuration WHERE role='p' AND content=-1;
 gp_inject_fault_infinite 
--------------------------
 Success:                 
(1 row)
SELECT gp_request_fts_probe_scan();
 gp_request_fts_probe_scan 
---------------------------
 t                         
(1 row)
SELECT gp_wait_until_triggered_fault('fts_probe', 1, dbid) FROM gp_segment_configuration WHERE role='p' AND content=-1;
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)

-- test scenario

-- The test is to validate crash recovery can be completed, for WAL
-- records generated by same transaction create and truncate followed
-- by abort transaction. Context is table created in same transaction
-- on truncate command performs unsafe truncate operation where it
-- emits WAL record for file truncate and truncates the file. During
-- crash recovery, file truncate WAL record replay will queue fsync
-- request. Replay of abort record will unlink the file. There used to
-- bug where abort record replay didn't emit forget fsync request
-- before unlink the file. This cased the crash recovery to PANIC as
-- couldn't complete the stale fsync request registered by file
-- truncate WAL record.
-- Also this is a chance of simply testing SyncAllXLogFile() thats fsync wal
-- files only during crash recovery.
1: CHECKPOINT;
CHECKPOINT
1: BEGIN;
BEGIN
1: CREATE TABLE ao_same_trans_truncate(a int, b int) WITH (appendonly=true, orientation=column);
CREATE TABLE
1: TRUNCATE TABLE ao_same_trans_truncate;
TRUNCATE TABLE
1: ABORT;
ROLLBACK
-- restart (immediate) to invoke crash recovery
1: SELECT pg_ctl(datadir, 'restart') FROM gp_segment_configuration WHERE role = 'p' AND content <> -1;
 pg_ctl 
--------
 OK     
 OK     
 OK     
(3 rows)
-- validate the segments recovered fine and able to serve queries
2: SELECT oid from gp_dist_random('pg_class') WHERE relname='ao_same_trans_truncate';
 oid 
-----
(0 rows)

-- cleanup
SELECT gp_inject_fault('fts_probe', 'reset', dbid) FROM gp_segment_configuration WHERE role='p' AND content=-1;
 gp_inject_fault 
-----------------
 Success:        
(1 row)
!\retcode gpconfig -c fsync -v off --skipvalidation;
(exited with code 0)
!\retcode gpstop -u;
-- start_ignore

-- end_ignore
(exited with code 0)
