-- Test block-level and row-level sampling. For block-level sampling both blkdir
-- and without blkdir cases are considered.

CREATE TABLE tsample_@amname@(i int) USING @amname@;

-- Case 0: Empty table
SELECT count(DISTINCT i) FROM tsample_@amname@ TABLESAMPLE BERNOULLI(100);
SELECT * FROM tsample_@amname@ TABLESAMPLE BERNOULLI(10);

SELECT count(DISTINCT i) FROM tsample_@amname@ TABLESAMPLE SYSTEM(100);
SELECT count(DISTINCT i) FROM tsample_@amname@ TABLESAMPLE SYSTEM(10);

CREATE INDEX ON tsample_@amname@(i) WHERE i != i;

SELECT count(DISTINCT i) FROM tsample_@amname@ TABLESAMPLE BERNOULLI(100);
SELECT * FROM tsample_@amname@ TABLESAMPLE BERNOULLI(10);

SELECT count(DISTINCT i) FROM tsample_@amname@ TABLESAMPLE SYSTEM(100);
SELECT count(DISTINCT i) FROM tsample_@amname@ TABLESAMPLE SYSTEM(10);

-- Case 1: Single partially populated logical heap block on each QE
CREATE TABLE tsample1_@amname@(i int) USING @amname@;
INSERT INTO tsample1_@amname@ SELECT generate_series(1, 100);

SELECT * FROM tsample1_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(1) ORDER BY i;
SELECT * FROM tsample1_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(1) ORDER BY i;
SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1);
SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1);
SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE SYSTEM(100);

CREATE INDEX ON tsample1_@amname@(i) WHERE i != i;

SELECT * FROM tsample1_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(1) ORDER BY i;
SELECT * FROM tsample1_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(1) ORDER BY i;
SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1);
SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1);
SELECT count(DISTINCT i) FROM tsample1_@amname@ TABLESAMPLE SYSTEM(100);

-- Case 2: Multiple full logical heap blocks on a single QE
CREATE TABLE tsample2_@amname@(i int) USING @amname@;
INSERT INTO tsample2_@amname@ SELECT 1 FROM generate_series(1, 32768 * 3);
SELECT count(DISTINCT ctid) FROM tsample2_@amname@;

SELECT ctid FROM tsample2_@amname@ TABLESAMPLE BERNOULLI(0.001) REPEATABLE(15);
SELECT ctid FROM tsample2_@amname@ TABLESAMPLE BERNOULLI(0.001) REPEATABLE(15);
SELECT count(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT count(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0);
SELECT count(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0);
SELECT count(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE SYSTEM(100);

CREATE INDEX ON tsample2_@amname@(i) WHERE i != i;

SELECT ctid FROM tsample2_@amname@ TABLESAMPLE BERNOULLI(0.001) REPEATABLE(15);
SELECT ctid FROM tsample2_@amname@ TABLESAMPLE BERNOULLI(0.001) REPEATABLE(15);
SELECT count(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT COUNT(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0);
SELECT COUNT(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0);
SELECT COUNT(DISTINCT ctid) FROM tsample2_@amname@ TABLESAMPLE SYSTEM(100);

-- Case 3: Multiple full logical heap blocks + a final partial block on a single QE
CREATE TABLE tsample3_@amname@(i int) USING @amname@;
INSERT INTO tsample3_@amname@ SELECT 1 FROM generate_series(1, 32768 * 2 + 100);
SELECT count(DISTINCT ctid) FROM tsample3_@amname@;
SELECT count(DISTINCT ctid) FROM tsample3_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample3_@amname@ GROUP BY 1 ORDER BY 1;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample3_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(7) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample3_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(7) GROUP BY 1 ORDER BY 1;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum,
  count(*) FROM tsample3_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(7) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum,
  count(*) FROM tsample3_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(7) GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample3_@amname@ TABLESAMPLE SYSTEM(100);

CREATE INDEX ON tsample3_@amname@(i) WHERE i != i;

SELECT count(DISTINCT ctid) FROM tsample3_@amname@ TABLESAMPLE BERNOULLI(100);
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample3_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(7) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample3_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(7) GROUP BY 1 ORDER BY 1;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum,
  count(*) FROM tsample3_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(7) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum,
  count(*) FROM tsample3_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(7) GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample3_@amname@ TABLESAMPLE SYSTEM(100);

-- Case 4: Logical heap blocks with holes on a single QE
CREATE TABLE tsample4_@amname@(i int) USING @amname@;
BEGIN;
INSERT INTO tsample4_@amname@ SELECT 1 FROM generate_series(1, 16384);
ABORT;
INSERT INTO tsample4_@amname@ SELECT 1 FROM generate_series(1, 16384);
BEGIN;
INSERT INTO tsample4_@amname@ SELECT 1 FROM generate_series(1, 32768);
ABORT;
INSERT INTO tsample4_@amname@ SELECT 1 FROM generate_series(1, 32768);
BEGIN;
INSERT INTO tsample4_@amname@ SELECT 1 FROM generate_series(1, 32768);
ABORT;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample4_@amname@;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;

SELECT count(DISTINCT ctid) FROM tsample4_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE SYSTEM(66) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE SYSTEM(66) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample4_@amname@ TABLESAMPLE SYSTEM(100);

CREATE INDEX ON tsample4_@amname@(i) WHERE i != i;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;

SELECT count(DISTINCT ctid) FROM tsample4_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE SYSTEM(66) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample4_@amname@ TABLESAMPLE SYSTEM(66) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample4_@amname@ TABLESAMPLE SYSTEM(100);

-- Case 5: Multiple full logical heap blocks across 2 aosegs on a single QE
CREATE TABLE tsample5_@amname@(i int) USING @amname@;
1: BEGIN;
2: BEGIN;
1: INSERT INTO tsample5_@amname@ SELECT 1 FROM generate_series(1, 32768 * 3);
2: INSERT INTO tsample5_@amname@ SELECT 20 FROM generate_series(1, 32768 * 3);
1: COMMIT;
2: COMMIT;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample5_@amname@;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;

SELECT count(DISTINCT ctid) FROM tsample5_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample5_@amname@ TABLESAMPLE SYSTEM(100);

CREATE INDEX ON tsample5_@amname@(i) WHERE i != i;

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE BERNOULLI(10) REPEATABLE(0) GROUP BY 1 ORDER BY 1;

SELECT count(DISTINCT ctid) FROM tsample5_@amname@ TABLESAMPLE BERNOULLI(100);

SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT right(split_part(ctid::text, ',', 1), -1) AS blknum, count(*)
  FROM tsample5_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(0) GROUP BY 1 ORDER BY 1;
SELECT count(DISTINCT ctid) FROM tsample5_@amname@ TABLESAMPLE SYSTEM(100);

-- Case 6: 1 partially full logical block on a single QE with deleted rows
CREATE TABLE tsample6_@amname@(i int, j int) USING @amname@;
INSERT INTO tsample6_@amname@ SELECT 1, j FROM generate_series(1, 10) j;
DELETE FROM tsample6_@amname@ WHERE j % 2 = 0;
SELECT j FROM tsample6_@amname@;

SELECT j FROM tsample6_@amname@ TABLESAMPLE BERNOULLI(20) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE BERNOULLI(20) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE BERNOULLI(100) ORDER BY j;

SELECT j FROM tsample6_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE SYSTEM(100) ORDER BY j;

CREATE INDEX ON tsample6_@amname@(i) WHERE i != i;

SELECT j FROM tsample6_@amname@ TABLESAMPLE BERNOULLI(20) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE BERNOULLI(20) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE BERNOULLI(100) ORDER BY j;

SELECT j FROM tsample6_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE SYSTEM(50) REPEATABLE(1) ORDER BY j;
SELECT j FROM tsample6_@amname@ TABLESAMPLE SYSTEM(100) ORDER BY j;

-- Case 7: Test rescans (similar to upstream test in regress/tablesample.sql)

CREATE TABLE ttr1 (a int, b int) USING @amname@ DISTRIBUTED BY (a);
CREATE TABLE ttr2 (a int, b int) USING @amname@ DISTRIBUTED BY (a);

INSERT INTO ttr1 VALUES (1, 1), (12, 1), (31, 1), (NULL, NULL);
INSERT INTO ttr2 VALUES (1, 2), (12, 2), (31, 2), (NULL, 6);
ANALYZE ttr1;
ANALYZE ttr2;
SET optimizer TO OFF;
SET enable_hashjoin TO OFF;
SET enable_mergejoin TO OFF;
SET enable_nestloop TO ON;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (50) REPEATABLE (2),
  ttr2 TABLESAMPLE BERNOULLI (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (50) REPEATABLE (2),
  ttr2 TABLESAMPLE BERNOULLI (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (100),
  ttr2 TABLESAMPLE BERNOULLI (100) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (100) REPEATABLE (2),
  ttr2 TABLESAMPLE BERNOULLI (100) WHERE ttr1.a = ttr2.a;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE SYSTEM (50) REPEATABLE (2),
  ttr2 TABLESAMPLE SYSTEM (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE SYSTEM (50) REPEATABLE (2),
  ttr2 TABLESAMPLE SYSTEM (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE SYSTEM (100),
  ttr2 TABLESAMPLE SYSTEM (100) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE SYSTEM (100),
  ttr2 TABLESAMPLE SYSTEM (100) WHERE ttr1.a = ttr2.a;

CREATE INDEX ON ttr1(a);
CREATE INDEX ON ttr2(a);

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (50) REPEATABLE (2),
  ttr2 TABLESAMPLE BERNOULLI (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (50) REPEATABLE (2),
  ttr2 TABLESAMPLE BERNOULLI (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (100),
  ttr2 TABLESAMPLE BERNOULLI (100) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE BERNOULLI (100) REPEATABLE (2),
  ttr2 TABLESAMPLE BERNOULLI (100) WHERE ttr1.a = ttr2.a;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE SYSTEM (50) REPEATABLE (2),
  ttr2 TABLESAMPLE SYSTEM (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE SYSTEM (50) REPEATABLE (2),
  ttr2 TABLESAMPLE SYSTEM (50) REPEATABLE (2) WHERE ttr1.a = ttr2.a;

EXPLAIN (COSTS OFF) SELECT * FROM ttr1 TABLESAMPLE SYSTEM (100),
  ttr2 TABLESAMPLE SYSTEM (100) WHERE ttr1.a = ttr2.a;
SELECT * FROM ttr1 TABLESAMPLE SYSTEM (100),
  ttr2 TABLESAMPLE SYSTEM (100) WHERE ttr1.a = ttr2.a;

RESET optimizer;
RESET enable_hashjoin;
RESET enable_mergejoin;
RESET enable_nestloop;
DROP TABLE ttr1;
DROP TABLE ttr2;

-- Case 8: Test tsm_system_rows on distributed tables
CREATE EXTENSION IF NOT EXISTS tsm_system_rows;

CREATE TABLE tsample8_@amname@(i int, j int) USING @amname@ DISTRIBUTED BY (i);

INSERT INTO tsample8_@amname@ SELECT 1, j FROM generate_series(1, 32768) j;
INSERT INTO tsample8_@amname@ SELECT 2, j + 32768 FROM generate_series(1, 32768) j;
INSERT INTO tsample8_@amname@ SELECT 5, j + 32768 * 2 FROM generate_series(1, 32768) j;

SELECT gp_segment_id, count(DISTINCT j) FROM tsample8_@amname@
  TABLESAMPLE SYSTEM_ROWS(1000) GROUP BY gp_segment_id;
SELECT count(DISTINCT j) FROM tsample8_@amname@ TABLESAMPLE SYSTEM_ROWS(32768 * 3);
SELECT count(DISTINCT j) FROM tsample8_@amname@ TABLESAMPLE SYSTEM_ROWS(32768 * 3 + 1);

-- Case 9: Test tsm_system_rows on replicated tables
CREATE TABLE tsample9_@amname@(i int) USING @amname@ DISTRIBUTED REPLICATED;

INSERT INTO tsample9_@amname@ SELECT * FROM generate_series(1, 32768);

SELECT count(DISTINCT i) FROM tsample9_@amname@ TABLESAMPLE SYSTEM_ROWS(1000);
SELECT count(DISTINCT i) FROM tsample9_@amname@ TABLESAMPLE SYSTEM_ROWS(32768);
SELECT count(DISTINCT i) FROM tsample9_@amname@ TABLESAMPLE SYSTEM_ROWS(32768 + 1);
