-- Coverage to ensure that reltuples and relpages are updated correctly upon an
-- index build (i.e. CREATE INDEX) on AO/CO tables.
-- Note: we don't maintain relallvisible for AO/CO tables, so it will always be 0.
-- Also, relallvisible is not maintained for indexes.

SET default_table_access_method TO @amname@;
SET

-- Case 1: Verify that CREATE INDEX is able to update both the aorel's reltuples
-- and the index's reltuples, to equal the actual segment tuple counts.

CREATE TABLE index_build_relstats_@amname@(a int);
CREATE TABLE
INSERT INTO index_build_relstats_@amname@ SELECT generate_series(1, 10);
INSERT 0 10

CREATE INDEX ON index_build_relstats_@amname@(a);
CREATE INDEX

-- Validate QEs
SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 5         | 1        | 0             
 1             | 1         | 1        | 0             
 2             | 4         | 1        | 0             
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 5         | 2        | 0             
 1             | 1         | 2        | 0             
 2             | 4         | 2        | 0             
(3 rows)
-- Validate on QD
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 3        | 0             
(1 row)
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@_a_idx';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 6        | 0             
(1 row)

DROP TABLE index_build_relstats_@amname@;
DROP TABLE

-- Case 2: Verify that CREATE INDEX is able to update the aorel's reltuples
-- to equal the actual segment tuple counts, when there are deleted tuples. For
-- the index, since we don't have a notion of "recently dead" vs surely dead,
-- we are conservative and form index entries even for deleted tuples. Thus, the
-- reltuples count for the index would also account for deleted tuples.

CREATE TABLE index_build_relstats_@amname@(a int);
CREATE TABLE
INSERT INTO index_build_relstats_@amname@ SELECT generate_series(1, 20);
INSERT 0 20

SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 8     
 1             | 4     
 2             | 8     
(3 rows)

DELETE FROM index_build_relstats_@amname@ WHERE a <= 10;
DELETE 10

CREATE INDEX ON index_build_relstats_@amname@(a);
CREATE INDEX

-- Validate QEs
SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 3     
 1             | 3     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 3         | 1        | 0             
 1             | 3         | 1        | 0             
 2             | 4         | 1        | 0             
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 8         | 2        | 0             
 1             | 4         | 2        | 0             
 2             | 8         | 2        | 0             
(3 rows)
-- Validate on QD
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 3        | 0             
(1 row)
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@_a_idx';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 20        | 6        | 0             
(1 row)

DROP TABLE index_build_relstats_@amname@;
DROP TABLE

-- Case 3: Verify that CREATE INDEX is able to update both the aorel's reltuples
-- and the index's reltuples, to equal the actual segment tuple counts, when
-- there are aborted tuples.

CREATE TABLE index_build_relstats_@amname@(a int);
CREATE TABLE

INSERT INTO index_build_relstats_@amname@ SELECT generate_series(1, 10);
INSERT 0 10

SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)

BEGIN;
BEGIN
INSERT INTO index_build_relstats_@amname@ SELECT generate_series(11, 20);
INSERT 0 10
ABORT;
ROLLBACK

CREATE INDEX ON index_build_relstats_@amname@(a);
CREATE INDEX

-- Validate QEs
SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 5         | 1        | 0             
 1             | 1         | 1        | 0             
 2             | 4         | 1        | 0             
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 5         | 2        | 0             
 1             | 1         | 2        | 0             
 2             | 4         | 2        | 0             
(3 rows)
-- Validate on QD
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 3        | 0             
(1 row)
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@_a_idx';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 6        | 0             
(1 row)

DROP TABLE index_build_relstats_@amname@;
DROP TABLE

-- Case 4: Verify that CREATE INDEX is able to update both the aorel's reltuples
-- and the index's reltuples, to equal the latest segment tuple counts, even
-- when it is executed in a transaction with a snapshot that precedes the INSERT
-- (highlights the need for using SnapshotAny)

CREATE TABLE index_build_relstats_@amname@(a int);
CREATE TABLE

1: BEGIN ISOLATION LEVEL REPEATABLE READ;
BEGIN
1: SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
(0 rows)

INSERT INTO index_build_relstats_@amname@ SELECT generate_series(1, 10);
INSERT 0 10

1: CREATE INDEX ON index_build_relstats_@amname@(a);
CREATE INDEX
1: COMMIT;
COMMIT

-- Validate QEs
SELECT gp_segment_id, count(*) FROM index_build_relstats_@amname@ GROUP BY gp_segment_id ORDER BY gp_segment_id;
 gp_segment_id | count 
---------------+-------
 0             | 5     
 1             | 1     
 2             | 4     
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 5         | 1        | 0             
 1             | 1         | 1        | 0             
 2             | 4         | 1        | 0             
(3 rows)
SELECT gp_segment_id, reltuples, relpages, relallvisible FROM gp_dist_random('pg_class') WHERE relname='index_build_relstats_@amname@_a_idx' ORDER BY gp_segment_id;
 gp_segment_id | reltuples | relpages | relallvisible 
---------------+-----------+----------+---------------
 0             | 5         | 2        | 0             
 1             | 1         | 2        | 0             
 2             | 4         | 2        | 0             
(3 rows)
-- Validate on QD
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 3        | 0             
(1 row)
SELECT reltuples, relpages, relallvisible FROM pg_class WHERE relname='index_build_relstats_@amname@_a_idx';
 reltuples | relpages | relallvisible 
-----------+----------+---------------
 10        | 6        | 0             
(1 row)

DROP TABLE index_build_relstats_@amname@;
DROP TABLE

RESET default_table_access_method;
RESET
