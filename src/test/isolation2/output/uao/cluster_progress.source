-- @Description Test to ensure we correctly report progress in
-- pg_stat_progress_cluster for append-optimized tables.

set default_table_access_method=@amname@;
SET

-- Setup the append-optimized table to be clustered
CREATE TABLE cluster_progress_ao(i int, j int);
CREATE TABLE
-- Insert all tuples to seg1
INSERT INTO cluster_progress_ao SELECT 0, i FROM generate_series(1, 100000) i;
INSERT 0 100000
INSERT INTO cluster_progress_ao SELECT 2, i FROM generate_series(1, 100000) i;
INSERT 0 100000
INSERT INTO cluster_progress_ao SELECT 5, i FROM generate_series(1, 100000) i;
INSERT 0 100000
-- Create two btree indexes
CREATE INDEX idx_cluster_progress_ao_i on cluster_progress_ao(i);
CREATE INDEX
CREATE INDEX idx_cluster_progress_ao_j on cluster_progress_ao(j);
CREATE INDEX
-- Delete some tuples
DELETE FROM cluster_progress_ao where j % 5 = 0;
DELETE 60000

-- Create a helper table that records storage-dependent static numbers.
CREATE TABLE helper_table AS SELECT gp_segment_id AS segid, (pg_relation_size(oid) + (current_setting('block_size')::int - 1)) / current_setting('block_size')::int AS heap_blks_total_before, CASE current_setting('default_table_access_method') WHEN 'ao_row' THEN 1 ELSE 2 END AS n_segfiles_per_tuple FROM gp_dist_random('pg_class') WHERE relname = 'cluster_progress_ao';
SELECT 3

-- Perform cluster and observe the progress

SELECT gp_inject_fault('cluster_ao_seq_scan_begin', 'suspend', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)

1&: CLUSTER cluster_progress_ao USING idx_cluster_progress_ao_j;  <waiting ...>
SELECT gp_wait_until_triggered_fault('cluster_ao_seq_scan_begin', 1, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
 Success:                      
 Success:                      
(3 rows)
-- We are in "seq scanning ao" phase and "heap_blks_total" should be available
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_total_all, heap_blks_scanned, index_rebuild_count from gp_stat_progress_cluster where gp_segment_id = 1;
 datname        | relid               | command | phase                         | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned | index_rebuild_count 
----------------+---------------------+---------+-------------------------------+---------------------+---------------------+---------------------+---------------------+-------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | seq scanning append-optimized | -                   | 0                   | 0                   | t                   | 0                 | 0                   
(1 row)
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_total_all, heap_blks_scanned, index_rebuild_count from gp_stat_progress_cluster_summary;
 datname        | relid               | command | phase                         | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned | index_rebuild_count 
----------------+---------------------+---------+-------------------------------+---------------------+---------------------+---------------------+---------------------+-------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | seq scanning append-optimized | -                   | 0                   | 0                   | t                   | 0                 | 0                   
(1 row)

-- Resume execution and suspend again in the middle of scanning old table
SELECT gp_inject_fault('cluster_ao_scanning_tuples', 'suspend', '', '', '', 200, 200, 0, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_inject_fault('cluster_ao_seq_scan_begin', 'reset', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_wait_until_triggered_fault('cluster_ao_scanning_tuples', 200, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
 Success:                      
 Success:                      
(3 rows)
-- We are in "seq scanning ao" phase. "heap_tuples_scanned" should be updated
-- every time we scan an old live tuple. "heap_blks_scanned" should be updated
-- every time we finish scanning a heap-block size worth of old tuples.
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_total_all, heap_blks_scanned / (SELECT n_segfiles_per_tuple FROM helper_table LIMIT 1) AS heap_blks_scanned_per_col, index_rebuild_count from gp_stat_progress_cluster where gp_segment_id = 1;
 datname        | relid               | command | phase                         | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_per_col | index_rebuild_count 
----------------+---------------------+---------+-------------------------------+---------------------+---------------------+---------------------+---------------------+---------------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | seq scanning append-optimized | -                   | 200                 | 0                   | t                   | 1                         | 0                   
(1 row)
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_total_all, heap_blks_scanned / (SELECT n_segfiles_per_tuple FROM helper_table LIMIT 1) AS heap_blks_scanned_per_col, index_rebuild_count from gp_stat_progress_cluster_summary;
 datname        | relid               | command | phase                         | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_per_col | index_rebuild_count 
----------------+---------------------+---------+-------------------------------+---------------------+---------------------+---------------------+---------------------+---------------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | seq scanning append-optimized | -                   | 600                 | 0                   | t                   | 3.0000000000000000        | 0                   
(1 row)

-- Resume execution and suspend again before we start sorting tuples
SELECT gp_inject_fault('cluster_ao_sorting_tuples', 'suspend', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_inject_fault('cluster_ao_scanning_tuples', 'reset', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_wait_until_triggered_fault('cluster_ao_sorting_tuples', 1, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
 Success:                      
 Success:                      
(3 rows)
-- We are in "sorting tuples" phase.
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_total_all, heap_blks_scanned = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_scanned_all, index_rebuild_count from gp_stat_progress_cluster where gp_segment_id = 1;
 datname        | relid               | command | phase          | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_all | index_rebuild_count 
----------------+---------------------+---------+----------------+---------------------+---------------------+---------------------+---------------------+-----------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | sorting tuples | -                   | 80000               | 0                   | t                   | t                     | 0                   
(1 row)
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_total_all, heap_blks_scanned = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_scanned_all, index_rebuild_count from gp_stat_progress_cluster_summary;
 datname        | relid               | command | phase          | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_all | index_rebuild_count 
----------------+---------------------+---------+----------------+---------------------+---------------------+---------------------+---------------------+-----------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | sorting tuples | -                   | 240000              | 0                   | t                   | t                     | 0                   
(1 row)

-- Resume execution and suspend again before we start writing tuples
SELECT gp_inject_fault('cluster_ao_write_begin', 'suspend', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_inject_fault('cluster_ao_sorting_tuples', 'reset', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_wait_until_triggered_fault('cluster_ao_write_begin', 1, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
 Success:                      
 Success:                      
(3 rows)
-- We are in "writing new ao" phase.
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_total_all, heap_blks_scanned = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_scanned_all, index_rebuild_count from gp_stat_progress_cluster where gp_segment_id = 1;
 datname        | relid               | command | phase                        | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_all | index_rebuild_count 
----------------+---------------------+---------+------------------------------+---------------------+---------------------+---------------------+---------------------+-----------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | writing new append-optimized | -                   | 80000               | 0                   | t                   | t                     | 0                   
(1 row)
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_total_all, heap_blks_scanned = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_scanned_all, index_rebuild_count from gp_stat_progress_cluster_summary;
 datname        | relid               | command | phase                        | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_all | index_rebuild_count 
----------------+---------------------+---------+------------------------------+---------------------+---------------------+---------------------+---------------------+-----------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | writing new append-optimized | -                   | 240000              | 0                   | t                   | t                     | 0                   
(1 row)

-- Resume execution and suspend again in the middle of writing new table
SELECT gp_inject_fault('cluster_ao_writing_tuples', 'suspend', '', '', '', 200, 200, 0, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_inject_fault('cluster_ao_write_begin', 'reset', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
SELECT gp_wait_until_triggered_fault('cluster_ao_writing_tuples', 200, dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
 Success:                      
 Success:                      
(3 rows)
-- We are in "writing new ao" phase. "heap_tuples_written" should be updated
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_total_all, heap_blks_scanned = (SELECT heap_blks_total_before FROM helper_table WHERE segid = 1) AS heap_blks_scanned_all, index_rebuild_count from gp_stat_progress_cluster where gp_segment_id = 1;
 datname        | relid               | command | phase                        | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_all | index_rebuild_count 
----------------+---------------------+---------+------------------------------+---------------------+---------------------+---------------------+---------------------+-----------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | writing new append-optimized | -                   | 80000               | 200                 | t                   | t                     | 0                   
(1 row)
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_total_all, heap_blks_scanned = (SELECT SUM(heap_blks_total_before) FROM helper_table) AS heap_blks_scanned_all, index_rebuild_count from gp_stat_progress_cluster_summary;
 datname        | relid               | command | phase                        | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total_all | heap_blks_scanned_all | index_rebuild_count 
----------------+---------------------+---------+------------------------------+---------------------+---------------------+---------------------+---------------------+-----------------------+---------------------
 isolation2test | cluster_progress_ao | CLUSTER | writing new append-optimized | -                   | 240000              | 600                 | t                   | t                     | 0                   
(1 row)

SELECT gp_inject_fault('cluster_ao_writing_tuples', 'reset', dbid) FROM gp_segment_configuration WHERE content > -1 AND role = 'p';
 gp_inject_fault 
-----------------
 Success:        
 Success:        
 Success:        
(3 rows)
1<:  <... completed>
CLUSTER

-- cluster has finished, nothing should show up in the view.
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total, heap_blks_scanned, index_rebuild_count from gp_stat_progress_cluster where gp_segment_id = 1;
 datname | relid | command | phase | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total | heap_blks_scanned | index_rebuild_count 
---------+-------+---------+-------+---------------------+---------------------+---------------------+-----------------+-------------------+---------------------
(0 rows)
select datname, relid::regclass, command, phase, cluster_index_relid::regclass, heap_tuples_scanned, heap_tuples_written, heap_blks_total, heap_blks_scanned, index_rebuild_count from gp_stat_progress_cluster_summary;
 datname | relid | command | phase | cluster_index_relid | heap_tuples_scanned | heap_tuples_written | heap_blks_total | heap_blks_scanned | index_rebuild_count 
---------+-------+---------+-------+---------------------+---------------------+---------------------+-----------------+-------------------+---------------------
(0 rows)

-- Cleanup
SELECT gp_inject_fault_infinite('all', 'reset', dbid) FROM gp_segment_configuration;
 gp_inject_fault_infinite 
--------------------------
 Success:                 
 Success:                 
 Success:                 
 Success:                 
 Success:                 
 Success:                 
 Success:                 
 Success:                 
(8 rows)
reset default_table_access_method;
RESET
DROP TABLE cluster_progress_ao;
DROP TABLE
DROP TABLE helper_table;
DROP TABLE
