-- This test is used to test if the writer gangs will be
-- reused and reader gangs will be cleaned after
-- gp_vmem_idle_resource_timeout. Since we no longer
-- clean up the idle writer gangs after the timeout,
-- no snapshot collision error should occur.

create or replace language plpython3u;
CREATE LANGUAGE
create extension if not exists gp_inject_fault;
CREATE EXTENSION

CREATE OR REPLACE FUNCTION idle_gang_pressure_test() RETURNS VOID LANGUAGE plpython3u AS $$ plpy.execute("SET gp_vmem_idle_resource_timeout = 1") for i in range(1000): plpy.execute("SELECT count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2);") plpy.execute("RESET gp_vmem_idle_resource_timeout") $$;
CREATE FUNCTION

set gp_vmem_idle_resource_timeout to '0.5s';
SET
set gp_snapshotadd_timeout to 0;
SET

create table target_session_id_t(target_session_id int) DISTRIBUTED REPLICATED;
CREATE TABLE
insert into target_session_id_t values(current_setting('gp_session_id')::int);
INSERT 0 1

create table idle_gang_cleaner_t (c1 int, c2 int);
CREATE TABLE

0U: select gp_inject_fault('proc_kill', 'suspend', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

select count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2) ;
 count 
-------
 0     
(1 row)
-- Start a new session to wait_until_triggered, avoid wait_until_triggered blocking IdleGangTimeoutHandler.
0U: select gp_inject_fault('proc_kill', 'wait_until_triggered', '','','', 1, 1, 1, 2 ,target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

select count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2) ;
 count 
-------
 0     
(1 row)

0U: select gp_inject_fault('proc_kill', 'reset', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- Release idle Reader gangs in transaction or transaction block
0U: select gp_inject_fault('proc_kill', 'suspend', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

begin;
BEGIN
select count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2) ;
 count 
-------
 0     
(1 row)
0U: select gp_inject_fault('proc_kill', 'wait_until_triggered', '','','', 1, 1, 1, 2 ,target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)
0U: select gp_inject_fault('proc_kill', 'reset', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)
end;
COMMIT

select idle_gang_pressure_test();
 idle_gang_pressure_test 
-------------------------
                         
(1 row)

drop table target_session_id_t;
DROP TABLE
drop table idle_gang_cleaner_t;
DROP TABLE
reset gp_vmem_idle_resource_timeout;
RESET
reset gp_snapshotadd_timeout;
RESET
