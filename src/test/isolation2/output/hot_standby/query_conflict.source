-- Tests for query conflict detection and cancellation on the hot standby.

----------------------------------------------------------------
-- Various query conflcit cases for hot standy.
--
-- All cases are written in this pattern:
-- 1. Start a standby transaction that will be conflicted and cancelled;
-- 2. Start a primary transaction that will conflict it;
-- 3. Commit the primary transaction. Since we are using remote_apply, it will
--     wait until the WAL is applied on the standby, which would happen only
--     after the standby query is cancelled;
-- 4. Run something on the standby transaction and see the conflict error, which
--     in some cases it's ERROR, in others it's FATAL.
-- 5. Quit, establish a new connection, and re-run
-- 6. Check the system view gp_stat_database_conflicts to see that the conflict
--     has been recorded. Note that we print the max count among all segments
--     to avoid flakiness.
-- See https://www.postgresql.org/docs/12/hot-standby.html#HOT-STANDBY-CONFLICT for more details.
----------------------------------------------------------------

-- We assume we start the test with clean records
-1S: select max(confl_tablespace), max(confl_lock), max(confl_snapshot), max(confl_bufferpin), max(confl_deadlock) from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 max | max | max | max | max 
-----+-----+-----+-----+-----
 0   | 0   | 0   | 0   | 0   
(1 row)

---------------------------------------------------------------------
-- Conflict with explicit lock
---------------------------------------------------------------------
create table hs_qc_lock(a int);
CREATE TABLE
insert into hs_qc_lock select * from generate_series(1,5);
INSERT 0 5
-1S: begin;
BEGIN
-1S: select * from hs_qc_lock;
 a 
---
 2 
 3 
 4 
 1 
 5 
(5 rows)
1: begin;
BEGIN
1: lock table hs_qc_lock in access exclusive mode;
LOCK TABLE
1: end;
COMMIT
-1S: select * from hs_qc_lock;
FATAL:  terminating connection due to conflict with recovery
DETAIL:  User was holding a relation lock for too long.
HINT:  In a moment you should be able to reconnect to the database and repeat your command.
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-1Sq: ... <quitting>
-1S: select * from hs_qc_lock;
 a 
---
 1 
 5 
 2 
 3 
 4 
(5 rows)
-1S: select max(confl_lock) from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 max 
-----
 1   
(1 row)

---------------------------------------------------------------------
-- Conflict with implicit lock
---------------------------------------------------------------------
-1S: begin;
BEGIN
-1S: select * from hs_qc_lock;
 a 
---
 1 
 5 
 2 
 3 
 4 
(5 rows)
1: alter table hs_qc_lock set access method ao_row;
ALTER TABLE
-1S: select * from hs_qc_lock;
FATAL:  terminating connection due to conflict with recovery
DETAIL:  User was holding a relation lock for too long.
HINT:  In a moment you should be able to reconnect to the database and repeat your command.
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-1Sq: ... <quitting>
-1S: select * from hs_qc_lock;
 a 
---
 1 
 5 
 2 
 3 
 4 
(5 rows)
-1S: select max(confl_lock) from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 max 
-----
 2   
(1 row)

---------------------------------------------------------------------
-- Conflict with drop database
---------------------------------------------------------------------
1: create database hs_qc_dropdb;
CREATE DATABASE
-1Sq: ... <quitting>
-1S:@db_name hs_qc_dropdb: select 1;
 ?column? 
----------
 1        
(1 row)
1: drop database hs_qc_dropdb;
DROP DATABASE
-1S: select 1;
FATAL:  terminating connection due to conflict with recovery
DETAIL:  User was connected to a database that must be dropped.
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-1Sq: ... <quitting>
-- Stats aren't counted for database conflicts. See: pgstat_recv_recoveryconflict

---------------------------------------------------------------------
-- Conflict with VACUUM (snapshot)
---------------------------------------------------------------------
1: create table hs_qc_vac1(a int);
CREATE TABLE
1: insert into hs_qc_vac1 select * from generate_series(1,10);
INSERT 0 10
-1S: begin transaction isolation level repeatable read;
BEGIN
-1S: select count(*) from hs_qc_vac1;
 count 
-------
 10    
(1 row)
1: delete from hs_qc_vac1;
DELETE 10
1: vacuum hs_qc_vac1;
VACUUM
-1S: select count(*) from hs_qc_vac1;
DETAIL:  User query might have needed to see row versions that must be removed.
ERROR:  terminating connection due to conflict with recovery
HINT:  In a moment you should be able to reconnect to the database and repeat your command.
-1Sq: ... <quitting>
-1S: select max(confl_snapshot) from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 max 
-----
 1   
(1 row)

---------------------------------------------------------------------
-- Conflict with VACUUM (buffer pin)
-- VACUUM of page that the standby is still holding buffer pin on, the difference with
-- the previous case is that here the deleted row is already invisible to the standby.
---------------------------------------------------------------------
1: create table hs_qc_vac2(a int);
CREATE TABLE
1: insert into hs_qc_vac2 values(2);
INSERT 0 1
1: delete from hs_qc_vac2;
DELETE 1
-- run select once on the standby, so the next select will fetch data from buffer
-1S: select * from hs_qc_vac2;
 a 
---
(0 rows)
-- suspend the standby at where it just unlocks the buffer but still holds the pin
1: select gp_inject_fault('heapgetpage_after_unlock_buffer', 'suspend','','','hs_qc_vac2',1,1,0,dbid) from gp_segment_configuration where content=0 and role='m';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-- we'll also make sure the startup process has sent out the signal before we let the standby backend release the pin
1: select gp_inject_fault('recovery_conflict_bufferpin_signal_sent', 'skip',dbid) from gp_segment_configuration where content=0 and role='m';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-1S&: select * from hs_qc_vac2;  <waiting ...>
1: vacuum hs_qc_vac2;
VACUUM
-- as mentioned before, make sure startup process has sent the signal, and then let the standby proceed
1: select gp_wait_until_triggered_fault('recovery_conflict_bufferpin_signal_sent', 1,dbid) from gp_segment_configuration where content=0 and role='m';
 gp_wait_until_triggered_fault 
-------------------------------
 Success:                      
(1 row)
1: select gp_inject_fault('recovery_conflict_bufferpin_signal_sent', 'reset',dbid) from gp_segment_configuration where content=0 and role='m';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
1: select gp_inject_fault('heapgetpage_after_unlock_buffer', 'reset',dbid) from gp_segment_configuration where content=0 and role='m';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-- should see the conflict
-1S<:  <... completed>
ERROR:  canceling statement due to conflict with recovery  (seg0 slice1 127.0.1.1:7005 pid=17044)
DETAIL:  User was holding shared buffer pin for too long.
-1Sq: ... <quitting>
-- XXX: sometimes it shows the number is 2 instead of 1. It still validates the test but it would be nice to know why.
-1S: select max(confl_bufferpin) > 0 from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 ?column? 
----------
 t        
(1 row)

---------------------------------------------------------------------
-- Conflict with drop (temp) tablespace
-- Note: regular user tablespaces won't cause conflict on the standby since the standby cannot create any objects under them.
---------------------------------------------------------------------
-- create tablespace
!\retcode mkdir -p @testtablespace@/hs_tablespace_directory;
(exited with code 0)
create tablespace hs_ts location '@testtablespace@/hs_tablespace_directory';
CREATE TABLESPACE

-- some prepartion on the primary
create table hs_ts_foo (i int, j int) distributed by(i);
CREATE TABLE
insert into hs_ts_foo select i, i from generate_series(1,800000)i;
INSERT 0 800000
analyze hs_ts_foo;
ANALYZE

-- make sure the standby won't run too fast and delete the temp files
select gp_inject_fault('after_open_temp_file', 'suspend',dbid) from gp_segment_configuration where content=1 and role='m';
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- on the standby, run some query that requires workfile, this example is taken
-- from regress/temp_tablespaces test
-1S: set temp_tablespaces = hs_ts;
SET
-1S: set default_tablespace = hs_ts;
SET
-1S: set statement_mem='2MB';
SET
-1S&: with a1 as (select * from hs_ts_foo), a2 as (select * from hs_ts_foo) select a1.i xx from a1 inner join a2 on a2.i = a1.i union all select count(a1.i) from a1 inner join a2 on a2.i = a1.i order by xx limit 5;  <waiting ...>

-- drop tablespace, should see conflict on the hot standby
drop tablespace hs_ts;
DROP TABLESPACE
select gp_inject_fault('after_open_temp_file', 'reset',dbid) from gp_segment_configuration where content=1 and role='m';
 gp_inject_fault 
-----------------
 Success:        
(1 row)
-1S<:  <... completed>
ERROR:  canceling statement due to conflict with recovery  (seg1 slice3 127.0.1.1:7006 pid=990)
DETAIL:  User was or might have been using tablespace that must be dropped.
-1Sq: ... <quitting>

-- conflict has been recorded
-1S: select max(confl_tablespace) from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 max 
-----
 1   
(1 row)

-- cleanup
!\retcode rm -rf @testtablespace@/hs_tablespace_directory;
GP_IGNORE:-- start_ignore
GP_IGNORE:
GP_IGNORE:-- end_ignore
(exited with code 0)
-- Do one checkpoint. Otherwise if server restarts w/o doing checkpoint (some subsequent
-- tests might do that), the server would complain it cannot find the directory for hs_ts.
checkpoint;
CHECKPOINT

----------------------------------------------------------------
-- Additional case to show that distributed transaction is not taken into
-- account w/o the help of restore-point-based distributed snapshot creation.
----------------------------------------------------------------

1: create table hs_qc_ds1(a int);
CREATE TABLE
1: insert into hs_qc_ds1 select * from generate_series(1,10);
INSERT 0 10
-- standby starts a repeatable read transaction, runs a local query that
-- creates a distributed snapshot w/o creating QE.
-1S: select count(*) from hs_qc_ds1;
 count 
-------
 10    
(1 row)
-1S: begin transaction isolation level repeatable read;
BEGIN
-1S: select relname from pg_class where relname = 'hs_qc_ds1';
 relname   
-----------
 hs_qc_ds1 
(1 row)
-- primary runs VACUUM
1: delete from hs_qc_ds1;
DELETE 10
1: vacuum hs_qc_ds1;
VACUUM
-- The standby query in theory should be cancelled, because it started before
-- the VACUUM. But in reality, it doesn't, and sees 0 rows, because the QE for the
-- SELECT below will create more recent local snapshot that does not conflict with
-- the VACUUM, and sees the result of DELETE+VACUUM.
-- Note: with the help of restore point, we would be able to create local snapshot
-- precisely corresponding to each distributed snapshot, and do conflict detection accordingly.
-1S: select count(*) from hs_qc_ds1;
 count 
-------
 0     
(1 row)
-1S: end;
COMMIT

----------------------------------------------------------------
-- Test GUC hot_standby_feedback
----------------------------------------------------------------
!\retcode gpconfig -c hot_standby_feedback -v on;
(exited with code 0)
!\retcode gpstop -u;
(exited with code 0)

1: create table hs_qc_guc1(a int);
CREATE TABLE
1: insert into hs_qc_guc1 select * from generate_series(1,10);
INSERT 0 10

-1S: begin transaction isolation level repeatable read;
BEGIN
-1S: select * from hs_qc_guc1;
 a  
----
 1  
 10 
 2  
 3  
 4  
 5  
 6  
 7  
 8  
 9  
(10 rows)

-- VACUUM won't cleanup this table since the standby still sees it
1: delete from hs_qc_guc1;
DELETE 10
1: vacuum hs_qc_guc1;
VACUUM

-- hot standby can still see those rows
-1S: select * from hs_qc_guc1;
 a  
----
 1  
 10 
 2  
 3  
 4  
 5  
 6  
 7  
 8  
 9  
(10 rows)

-- after the conflicting read transaction ends, the next VACUUM will successfully vacuum the table
-1S: end;
COMMIT
1: vacuum hs_qc_guc1;
VACUUM
-1S: select * from hs_qc_guc1;
 a 
---
(0 rows)
-1Sq: ... <quitting>

!\retcode gpconfig -r hot_standby_feedback;
(exited with code 0)
!\retcode gpstop -u;
(exited with code 0)

----------------------------------------------------------------
-- Test GUC vacuum_defer_cleanup_age
----------------------------------------------------------------
-- Use a GUC value that's not 0, so VACUUM does not clean up
-- recent dead rows that the hot standby might be still seeing.
!\retcode gpconfig -c vacuum_defer_cleanup_age -v 1;
(exited with code 0)
!\retcode gpstop -u;
(exited with code 0)

1: create table hs_qc_guc2(a int);
CREATE TABLE
1: insert into hs_qc_guc2 select * from generate_series(1,10);
INSERT 0 10

-1S: begin transaction isolation level repeatable read;
BEGIN
-1S: select count(*) from hs_qc_guc2;
 count 
-------
 10    
(1 row)

-- VACUUM won't cleanup this table since the DELETE is still within vacuum_defer_cleanup_age
1: delete from hs_qc_guc2;
DELETE 10
1: vacuum hs_qc_guc2;
VACUUM

-- showing all rows are deleted but not vacuumed
1: select count(*) from hs_qc_guc2;
 count 
-------
 0     
(1 row)
1: set gp_select_invisible to on;
SET
1: select count(*) from hs_qc_guc2;
 count 
-------
 10    
(1 row)

-- hot standby can still query the table
-1S: select count(*) from hs_qc_guc2;
 count 
-------
 10    
(1 row)

-- only if the age is reached, hot standby will see the same conflict as before
1: create temp table tt1(a int);
CREATE TABLE
1: vacuum hs_qc_guc2;
VACUUM
-1S: select count(*) from hs_qc_guc2;
ERROR:  terminating connection due to conflict with recovery  (seg0 slice1 127.0.1.1:7005 pid=18713)
DETAIL:  User query might have needed to see row versions that must be removed.
HINT:  In a moment you should be able to reconnect to the database and repeat your command.
-1Sq: ... <quitting>
-1S: select max(confl_snapshot) from gp_stat_database_conflicts where datname = 'isolation2-hot-standby';
 max 
-----
 2   
(1 row)

!\retcode gpconfig -r vacuum_defer_cleanup_age;
(exited with code 0)
!\retcode gpstop -u;
(exited with code 0)

