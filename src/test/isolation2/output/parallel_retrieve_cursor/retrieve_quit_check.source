-- @Description Tests retrieve quit
-- Test quitting retrieve sessions interfering with multiple endpoints when calling
-- gp_wait_parallel_retrieve_cursor.
DROP TABLE IF EXISTS t1;
DROP TABLE
CREATE TABLE t1 (a INT) DISTRIBUTED by (a);
CREATE TABLE
insert into t1 select generate_series(1,100);
INSERT 0 100

--------- Test1: test for quit retrieve will cancel all unfinished QE backend
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
1: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
1: @post_run 'parse_endpoint_info 1 1 2 3 4' : SELECT endpointname,auth_token,hostname,port,state FROM gp_get_endpoints() WHERE cursorname='c1';
 endpoint_id1 | token_id | host_id | port_id | READY
 endpoint_id1 | token_id | host_id | port_id | READY
 endpoint_id1 | token_id | host_id | port_id | READY
(3 rows)
1: @post_run 'parse_endpoint_info 2 1 2 3 4' : SELECT endpointname,auth_token,hostname,port,state FROM gp_get_endpoints() WHERE cursorname='c2';
 endpoint_id2 | token_id | host_id | port_id | READY
 endpoint_id2 | token_id | host_id | port_id | READY
 endpoint_id2 | token_id | host_id | port_id | READY
(3 rows)
1: @post_run 'parse_endpoint_info 3 1 2 3 4' : SELECT endpointname,auth_token,hostname,port,state FROM gp_get_endpoints() WHERE cursorname='c3';
 endpoint_id3 | token_id | host_id | port_id | READY
 endpoint_id3 | token_id | host_id | port_id | READY
 endpoint_id3 | token_id | host_id | port_id | READY
(3 rows)

-- in one retrieve session, retrieve multiple tokens (begin retrieving, finished retrieving, not yet retrieve)
0R: @pre_run 'set_endpoint_variable @ENDPOINT1' : RETRIEVE 10 FROM ENDPOINT "@ENDPOINT1";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)
0R: @pre_run 'set_endpoint_variable @ENDPOINT2' : RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
 27 
 29 
 34 
 37 
 39 
 41 
 42 
 45 
 51 
 53 
 54 
 55 
 59 
 60 
 65 
 66 
 70 
 75 
 77 
 80 
 81 
 84 
 90 
 92 
 93 
 94 
 97 
 99 
(38 rows)
-- skip TOKEN3 in this session

-- a new retrieve session. c1 & c2 cannot be retrieved since an existing retrieve session has
-- retrieved them at least once.
3R: @pre_run 'set_endpoint_variable @ENDPOINT1' : RETRIEVE 10 FROM ENDPOINT "@ENDPOINT1";
ERROR:  endpoint endpoint_id1 was already attached by receiver(pid: PID)
DETAIL:  An endpoint can only be attached by one retrieving session.
3R: @pre_run 'set_endpoint_variable @ENDPOINT2' : RETRIEVE ALL FROM ENDPOINT "@ENDPOINT2";
ERROR:  another session (pid: 49941) used the endpoint and completed retrieving
3R: @pre_run 'set_endpoint_variable @ENDPOINT3' : RETRIEVE 10 FROM ENDPOINT "@ENDPOINT3";
 a  
----
 2  
 3  
 4  
 7  
 8  
 16 
 18 
 19 
 22 
 24 
(10 rows)

2: SELECT cursorname, state FROM gp_get_endpoints();
 cursorname | state    
------------+----------
 c1         | ATTACHED 
 c1         | READY    
 c1         | READY    
 c2         | FINISHED 
 c2         | READY    
 c2         | READY    
 c3         | ATTACHED 
 c3         | READY    
 c3         | READY    
(9 rows)
-- verify endpoints on seg0 for c2 has been finishied
0U: SELECT cursorname,senderpid<>-1, receiverpid<>-1, state FROM gp_get_segment_endpoints();
 cursorname | ?column? | ?column? | state    
------------+----------+----------+----------
 c1         | t        | t        | ATTACHED 
 c2         | f        | t        | FINISHED 
 c3         | t        | t        | ATTACHED 
(3 rows)
-- quit the first retrieve session
0Rq: ... <quitting>

-- Check quiting retrieve session won't impact on finished endpoint.
-- Now the interrupt is checked using WaitLatch() for time: WAIT_NORMAL_TIMEOUT,
-- so here the sleep time should be greater than WAIT_NORMAL_TIMEOUT.
1: SELECT pg_sleep(0.4);
 pg_sleep 
----------
          
(1 row)
-- make sure no error for c2
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2', 0);
 finished 
----------
 f        
(1 row)
-- When the retrieve session was terminated, the endpoint has not been fully retrieved
-- by this retrieve process should be cancelled.
-- The endpoint on seg0 for c1 should firstly become to RELEASED (the retrieve process set it),
-- and then was removed (during the endpoint QE cancelled)
2: SELECT cursorname, state FROM gp_get_endpoints();
 cursorname | state    
------------+----------
 c1         | READY    
 c1         | READY    
 c2         | FINISHED 
 c2         | READY    
 c2         | READY    
 c3         | ATTACHED 
 c3         | READY    
 c3         | READY    
(8 rows)

-- verify endpoints for c1 is gone
0U: SELECT cursorname, senderpid<>-1, receiverpid<>-1, state FROM gp_get_segment_endpoints();
 cursorname | ?column? | ?column? | state    
------------+----------+----------+----------
 c2         | f        | t        | FINISHED 
 c3         | t        | t        | ATTACHED 
(2 rows)

-- Now check on c1 will trigger the error, all endpoints should be aborted since the transaction
-- will be terminated.
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c1', 0);
ERROR:  canceling MPP operation: "Endpoint retrieve session is quitting. All unfinished parallel retrieve cursors on the session will be terminated."  (seg0 192.168.235.128:7002 pid=78585)
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c2', 0);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
1: SELECT * FROM gp_wait_parallel_retrieve_cursor('c3', 0);
ERROR:  current transaction is aborted, commands ignored until end of transaction block
2: SELECT cursorname, state FROM gp_get_endpoints();
 cursorname | state 
------------+-------
(0 rows)

1: END;
ROLLBACK

2: SELECT cursorname, state FROM gp_get_endpoints();
 cursorname | state 
------------+-------
(0 rows)

-- quit all sessions
1q: ... <quitting>
2q: ... <quitting>
0Uq: ... <quitting>
