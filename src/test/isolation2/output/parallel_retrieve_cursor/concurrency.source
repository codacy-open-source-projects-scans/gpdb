ALTER SYSTEM SET gp_max_parallel_cursors TO 3;
ALTER SYSTEM
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t              
(1 row)

-- @Description Tests concurrency for the PARALLEL RETRIEVE CURSOR statement
--
DROP TABLE IF EXISTS t1;
DROP TABLE
CREATE TABLE t1 (a INT) DISTRIBUTED by (a);
CREATE TABLE
insert into t1 select generate_series(1,100);
INSERT 0 100

-- Test: concurrency limit in the same session
BEGIN;
BEGIN
DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
COMMIT;
COMMIT

BEGIN;
BEGIN
DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
DECLARE c4 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
ERROR:  Opened parallel cursor number exceeded allowed concurrency: 3
COMMIT;
ROLLBACK

-- Test: concurrency limit in different session
1: BEGIN;
BEGIN
1: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
1: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
2: BEGIN;
BEGIN
2: DECLARE c1 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
2: DECLARE c2 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
ERROR:  Opened parallel cursor number exceeded allowed concurrency: 3
2: ABORT;
ROLLBACK
1: DECLARE c3 PARALLEL RETRIEVE CURSOR FOR SELECT * FROM t1;
DECLARE PARALLEL RETRIEVE CURSOR
1: COMMIT;
COMMIT

ALTER SYSTEM RESET gp_max_parallel_cursors;
ALTER SYSTEM
SELECT pg_reload_conf();
 pg_reload_conf 
----------------
 t              
(1 row)
