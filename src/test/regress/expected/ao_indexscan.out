-- Test index scans on append-optimized tables. We mainly test the plans being
-- generated, in addition to smoke testing the output if Index Scan is exercised.
-- Turn off ORCA as it doesn't yet support Index Scans on AO/CO tables.
set optimizer to off;
-- Create an uncompressed test ao_row table
create table aoindexscantab_uncomp (i int4, j int4) using ao_row;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into aoindexscantab_uncomp select g, g % 10000 from generate_series(1, 10000000) g;
create index on aoindexscantab_uncomp(j);
create index on aoindexscantab_uncomp(i);
analyze aoindexscantab_uncomp;
-- A simple key-value lookup query. Should use an Index scan.
explain (costs off) select i, j from aoindexscantab_uncomp where i = 90;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Scan using aoindexscantab_uncomp_i_idx on aoindexscantab_uncomp
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

select i, j from aoindexscantab_uncomp where i = 90;
 i  | j  
----+----
 90 | 90
(1 row)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select i from aoindexscantab_uncomp where i = 90;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aoindexscantab_uncomp_i_idx on aoindexscantab_uncomp
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

-- BitmapScan should still be preferred when selectivity is higher.
explain (costs off) select * from aoindexscantab_uncomp where i < 1000000;
                          QUERY PLAN                          
--------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Bitmap Heap Scan on aoindexscantab_uncomp
         Recheck Cond: (i < 1000000)
         ->  Bitmap Index Scan on aoindexscantab_uncomp_i_idx
               Index Cond: (i < 1000000)
 Optimizer: Postgres-based planner
(6 rows)

-- Should use an Index Scan as an ordering operator when limit is specified.
explain (costs off) select * from aoindexscantab_uncomp order by i limit 5;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: i
         ->  Limit
               ->  Index Scan using aoindexscantab_uncomp_i_idx on aoindexscantab_uncomp
 Optimizer: Postgres-based planner
(6 rows)

select * from aoindexscantab_uncomp order by i limit 5;
 i | j 
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select j from aoindexscantab_uncomp order by j limit 15;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: j
         ->  Limit
               ->  Index Only Scan using aoindexscantab_uncomp_j_idx on aoindexscantab_uncomp
 Optimizer: Postgres-based planner
(6 rows)

-- When gp_enable_ao_indexscan is off, we should not pick an Index Scan. But
-- IndexOnly Scans continue to be picked.
set gp_enable_ao_indexscan to off;
explain (costs off) select i, j from aoindexscantab_uncomp where i = 90;
                          QUERY PLAN                          
--------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Bitmap Heap Scan on aoindexscantab_uncomp
         Recheck Cond: (i = 90)
         ->  Bitmap Index Scan on aoindexscantab_uncomp_i_idx
               Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(6 rows)

explain (costs off) select i from aoindexscantab_uncomp where i = 90;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aoindexscantab_uncomp_i_idx on aoindexscantab_uncomp
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

reset gp_enable_ao_indexscan;
-- Create a compressed test ao_row table
create table aoindexscantab (i int4, j int4) with (appendonly=true, compresstype=zstd);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into aoindexscantab select g, g % 10000 from generate_series(1, 10000000) g;
create index on aoindexscantab(j);
create index on aoindexscantab(i);
analyze aoindexscantab;
-- A simple key-value lookup query. Should use an Index scan.
explain (costs off) select i, j from aoindexscantab where i = 90;
                          QUERY PLAN                           
---------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Scan using aoindexscantab_i_idx on aoindexscantab
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

select i, j from aoindexscantab where i = 90;
 i  | j  
----+----
 90 | 90
(1 row)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select i from aoindexscantab where i = 90;
                          QUERY PLAN                           
--------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aoindexscantab_i_idx on aoindexscantab
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

-- BitmapScan should still be preferred when selectivity is higher (we are more
-- pessimistic towards IndexScans when the table is compressed, which is why the
-- predicate is 10x lower here as compared to the uncompressed case).
explain (costs off) select * from aoindexscantab where i < 100000;
                      QUERY PLAN                       
-------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Bitmap Heap Scan on aoindexscantab
         Recheck Cond: (i < 100000)
         ->  Bitmap Index Scan on aoindexscantab_i_idx
               Index Cond: (i < 100000)
 Optimizer: Postgres-based planner
(6 rows)

-- Should use an Index Scan as an ordering operator when limit is specified.
explain (costs off) select * from aoindexscantab order by i limit 5;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: i
         ->  Limit
               ->  Index Scan using aoindexscantab_i_idx on aoindexscantab
 Optimizer: Postgres-based planner
(6 rows)

select * from aoindexscantab order by i limit 5;
 i | j 
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select j from aoindexscantab order by j limit 15;
                                QUERY PLAN                                 
--------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: j
         ->  Limit
               ->  Index Only Scan using aoindexscantab_j_idx on aoindexscantab
 Optimizer: Postgres-based planner
(6 rows)

-- When gp_enable_ao_indexscan is off, we should not pick an Index Scan. But
-- IndexOnly Scans continue to be picked.
set gp_enable_ao_indexscan to off;
explain (costs off) select i, j from aoindexscantab where i = 90;
                      QUERY PLAN                       
-------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Bitmap Heap Scan on aoindexscantab
         Recheck Cond: (i = 90)
         ->  Bitmap Index Scan on aoindexscantab_i_idx
               Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(6 rows)

explain (costs off) select i from aoindexscantab where i = 90;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aoindexscantab_i_idx on aoindexscantab
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

reset gp_enable_ao_indexscan;
-- Create an uncompressed test ao_column table
create table aocsindexscantab_uncomp (i int4, j int4) using ao_column;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into aocsindexscantab_uncomp select g, g % 10000 from generate_series(1, 10000000) g;
create index on aocsindexscantab_uncomp(j);
create index on aocsindexscantab_uncomp(i);
analyze aocsindexscantab_uncomp;
-- A simple key-value lookup query. Should use an Index scan.
explain (costs off) select i, j from aocsindexscantab_uncomp where i = 90;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Scan using aocsindexscantab_uncomp_i_idx on aocsindexscantab_uncomp
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

select i, j from aocsindexscantab_uncomp where i = 90;
 i  | j  
----+----
 90 | 90
(1 row)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select i from aocsindexscantab_uncomp where i = 90;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aocsindexscantab_uncomp_i_idx on aocsindexscantab_uncomp
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

-- BitmapScan should still be preferred when selectivity is higher.
explain (costs off) select * from aocsindexscantab_uncomp where i < 1000000;
                           QUERY PLAN                           
----------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Bitmap Heap Scan on aocsindexscantab_uncomp
         Recheck Cond: (i < 1000000)
         ->  Bitmap Index Scan on aocsindexscantab_uncomp_i_idx
               Index Cond: (i < 1000000)
 Optimizer: Postgres-based planner
(6 rows)

-- Should use an Index Scan as an ordering operator when limit is specified.
explain (costs off) select * from aocsindexscantab_uncomp order by i limit 5;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: i
         ->  Limit
               ->  Index Scan using aocsindexscantab_uncomp_i_idx on aocsindexscantab_uncomp
 Optimizer: Postgres-based planner
(6 rows)

select * from aocsindexscantab_uncomp order by i limit 5;
 i | j 
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select j from aocsindexscantab_uncomp order by j limit 15;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: j
         ->  Limit
               ->  Index Only Scan using aocsindexscantab_uncomp_j_idx on aocsindexscantab_uncomp
 Optimizer: Postgres-based planner
(6 rows)

-- When gp_enable_ao_indexscan is off, we should not pick an Index Scan.
-- When gp_enable_ao_indexscan is off, we should not pick an Index Scan. But
-- IndexOnly Scans continue to be picked.
set gp_enable_ao_indexscan to off;
explain (costs off) select i, j from aocsindexscantab_uncomp where i = 90;
                           QUERY PLAN                           
----------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Bitmap Heap Scan on aocsindexscantab_uncomp
         Recheck Cond: (i = 90)
         ->  Bitmap Index Scan on aocsindexscantab_uncomp_i_idx
               Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(6 rows)

explain (costs off) select i from aocsindexscantab_uncomp where i = 90;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aocsindexscantab_uncomp_i_idx on aocsindexscantab_uncomp
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

reset gp_enable_ao_indexscan;
-- Create a compressed test ao_column table
create table aocsindexscantab (i int4, j int4) with (appendonly=true, orientation=column, compresstype=zstd);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into aocsindexscantab select g, g % 10000 from generate_series(1, 10000000) g;
create index on aocsindexscantab(j);
create index on aocsindexscantab(i);
analyze aocsindexscantab;
-- A simple key-value lookup query. Should use an Index scan.
explain (costs off) select i, j from aocsindexscantab where i = 90;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Scan using aocsindexscantab_i_idx on aocsindexscantab
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

select i, j from aocsindexscantab where i = 90;
 i  | j  
----+----
 90 | 90
(1 row)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select i from aocsindexscantab where i = 90;
                            QUERY PLAN                             
------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aocsindexscantab_i_idx on aocsindexscantab
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

-- Should use an Index Scan as an ordering operator when limit is specified.
explain (costs off) select * from aocsindexscantab order by i limit 5;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: i
         ->  Limit
               ->  Index Scan using aocsindexscantab_i_idx on aocsindexscantab
 Optimizer: Postgres-based planner
(6 rows)

select * from aocsindexscantab order by i limit 5;
 i | j 
---+---
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
(5 rows)

-- IndexOnlyScan should still be preferred when only the index key is involved.
explain (costs off) select j from aocsindexscantab order by j limit 15;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Limit
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Merge Key: j
         ->  Limit
               ->  Index Only Scan using aocsindexscantab_j_idx on aocsindexscantab
 Optimizer: Postgres-based planner
(6 rows)

-- BitmapScan should still be preferred when selectivity is higher (we are more
-- pessimistic towards IndexScans when the table is compressed, which is why the
-- predicate is 10x lower here as compared to the uncompressed case).
explain (costs off) select * from aocsindexscantab where i < 100000;
                       QUERY PLAN                        
---------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Bitmap Heap Scan on aocsindexscantab
         Recheck Cond: (i < 100000)
         ->  Bitmap Index Scan on aocsindexscantab_i_idx
               Index Cond: (i < 100000)
 Optimizer: Postgres-based planner
(6 rows)

-- When gp_enable_ao_indexscan is off, we should not pick an Index Scan.
-- When gp_enable_ao_indexscan is off, we should not pick an Index Scan. But
-- IndexOnly Scans continue to be picked.
set gp_enable_ao_indexscan to off;
explain (costs off) select i, j from aocsindexscantab where i = 90;
                       QUERY PLAN                        
---------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Bitmap Heap Scan on aocsindexscantab
         Recheck Cond: (i = 90)
         ->  Bitmap Index Scan on aocsindexscantab_i_idx
               Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(6 rows)

explain (costs off) select i from aocsindexscantab where i = 90;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Index Only Scan using aocsindexscantab_i_idx on aocsindexscantab
         Index Cond: (i = 90)
 Optimizer: Postgres-based planner
(4 rows)

reset gp_enable_ao_indexscan;
