--
-- Test the planner's ability to produce different kinds of plans to implement
-- grouping and aggregation.
--
-- start_matchsubs
-- m/\(cost=.*\)/
-- s/\(cost=.*\)//
-- end_matchsubs
drop table if exists olap_test;
NOTICE:  table "olap_test" does not exist, skipping
drop table if exists olap_test_single;
NOTICE:  table "olap_test_single" does not exist, skipping
create table olap_test(a int4, b int4, c int4, d int4) distributed by (a, b);
insert into olap_test select g / 5000, g / 1000, g / 500, g from generate_series(1, 10000) g;
analyze olap_test;
create table olap_test_single(a int4, b int4, c int4, d int4) distributed by (a);
insert into olap_test_single select g / 5000, g / 1000, g / 500, g from generate_series(1, 10000) g;
analyze olap_test_single;
-- If the GROUP BY is a superset of the table's distribution keys, the
-- aggregation can be independently in segments, and just gather the
-- results. (1-phase agg)
explain select a, b, sum(d) from olap_test group by a, b;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.97 rows=12 width=16)
   ->  HashAggregate  (cost=0.00..431.97 rows=4 width=16)
         Group Key: a, b
         ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=12)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.79.1
(5 rows)

select a, b, sum(d) from olap_test group by a, b;
 a | b  |   sum   
---+----+---------
 1 |  6 | 6499500
 0 |  2 | 2499500
 0 |  1 | 1499500
 1 |  5 | 5499500
 1 |  8 | 8499500
 1 |  9 | 9499500
 0 |  3 | 3499500
 1 |  7 | 7499500
 0 |  0 |  499500
 2 | 10 |   10000
 0 |  4 | 4499500
(11 rows)

explain select a, b, c, sum(d) from olap_test group by a, b, c;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..432.41 rows=113 width=20)
   ->  HashAggregate  (cost=0.00..432.41 rows=38 width=20)
         Group Key: a, b, c
         ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=16)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.79.1
(5 rows)

select a, b, c, sum(d) from olap_test group by a, b, c;
 a | b  | c  |   sum   
---+----+----+---------
 1 |  6 | 13 | 3374750
 1 |  6 | 12 | 3124750
 0 |  2 |  4 | 1124750
 1 |  5 | 11 | 2874750
 1 |  5 | 10 | 2624750
 0 |  2 |  5 | 1374750
 0 |  1 |  2 |  624750
 0 |  1 |  3 |  874750
 0 |  4 |  8 | 2124750
 0 |  0 |  1 |  374750
 1 |  7 | 14 | 3624750
 1 |  7 | 15 | 3874750
 0 |  4 |  9 | 2374750
 2 | 10 | 20 |   10000
 1 |  8 | 16 | 4124750
 0 |  3 |  6 | 1624750
 0 |  3 |  7 | 1874750
 1 |  8 | 17 | 4374750
 1 |  9 | 18 | 4624750
 0 |  0 |  0 |  124750
 1 |  9 | 19 | 4874750
(21 rows)

-- If it's not a superset, redistribution is needed.
explain select a, sum(d) from olap_test group by a;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.54 rows=3 width=12)
   ->  Finalize HashAggregate  (cost=0.00..431.54 rows=1 width=12)
         Group Key: a
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.54 rows=1 width=12)
               Hash Key: a
               ->  Streaming Partial HashAggregate  (cost=0.00..431.54 rows=1 width=12)
                     Group Key: a
                     ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

select a, sum(d) from olap_test group by a;
 a |   sum    
---+----------
 2 |    10000
 1 | 37497500
 0 | 12497500
(3 rows)

-- Two-phase plain agg
explain select sum(d) from olap_test;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=0.00..431.11 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.11 rows=1 width=8)
         ->  Partial Aggregate  (cost=0.00..431.11 rows=1 width=8)
               ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=4)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.79.1
(5 rows)

select sum(d) from olap_test;
   sum    
----------
 50005000
(1 row)

--
-- DISTINCT aggregates
--
-- If the DISTINCT argument matches the distribution key, two-stage aggregation
-- is possible.
explain select sum(distinct a) from olap_test_single;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=0.00..431.17 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.17 rows=1 width=8)
         ->  Partial Aggregate  (cost=0.00..431.17 rows=1 width=8)
               ->  Seq Scan on olap_test_single  (cost=0.00..431.13 rows=3334 width=4)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.79.1
(5 rows)

select sum(distinct a) from olap_test_single;
 sum 
-----
   3
(1 row)

-- Otherwise, need a more complicated plans
explain select sum(distinct b) from olap_test_single;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=0.00..431.15 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.15 rows=1 width=8)
         ->  Partial Aggregate  (cost=0.00..431.15 rows=1 width=8)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.15 rows=3334 width=4)
                     Hash Key: b
                     ->  Seq Scan on olap_test_single  (cost=0.00..431.08 rows=3334 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select sum(distinct b) from olap_test_single;
 sum 
-----
  55
(1 row)

-- If there are a lot of distinct values, then the preliminary aggregation and
-- redistribution steps are not worth the trouble, it's cheaper to just gather
-- all the input
explain select sum(distinct d) from olap_test_single;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=0.00..431.15 rows=1 width=8)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.15 rows=1 width=8)
         ->  Partial Aggregate  (cost=0.00..431.15 rows=1 width=8)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.15 rows=3334 width=4)
                     Hash Key: d
                     ->  Seq Scan on olap_test_single  (cost=0.00..431.08 rows=3334 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select sum(distinct d) from olap_test_single;
   sum    
----------
 50005000
(1 row)

--
-- GROUPING SETS
--
set gp_motion_cost_per_row=1.0;
-- If the query produces a relatively small number of groups in comparison to
-- the number of input rows, two-stage aggregation will be picked.
explain select a, b, c, sum(d) from olap_test group by grouping sets((a, b), (a), (b, c));
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1726.50 rows=152 width=20)
   ->  Sequence  (cost=0.00..1726.49 rows=51 width=20)
         ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.19 rows=3334 width=1)
               ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=16)
         ->  Append  (cost=0.00..1295.30 rows=51 width=20)
               ->  Finalize HashAggregate  (cost=0.00..431.92 rows=44 width=16)
                     Group Key: share0_ref2.b, share0_ref2.c
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.91 rows=44 width=16)
                           Hash Key: share0_ref2.b, share0_ref2.c
                           ->  Streaming Partial HashAggregate  (cost=0.00..431.91 rows=44 width=16)
                                 Group Key: share0_ref2.b, share0_ref2.c
                                 ->  Shared Scan (share slice:id 2:0)  (cost=0.00..431.10 rows=3334 width=12)
               ->  Finalize HashAggregate  (cost=0.00..431.47 rows=1 width=12)
                     Group Key: share0_ref3.a
                           ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.48 rows=1 width=12)
                                 Hash Key: share0_ref3.a
                                 ->  Streaming Partial HashAggregate  (cost=0.00..431.48 rows=1 width=12)
                                       Group Key: share0_ref3.a
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.06 rows=3334 width=8)
               ->  HashAggregate  (cost=0.00..431.91 rows=7 width=16)
                     Group Key: share0_ref4.a, share0_ref4.b
                     ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.10 rows=3334 width=12)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select a, b, c, sum(d) from olap_test group by grouping sets((a, b), (a), (b, c));
 a | b  | c  |   sum    
---+----+----+----------
 0 |  0 |    |   499500
 0 |  1 |    |  1499500
 0 |  2 |    |  2499500
 0 |  3 |    |  3499500
 0 |  4 |    |  4499500
 1 |  5 |    |  5499500
 1 |  6 |    |  6499500
 1 |  7 |    |  7499500
 1 |  8 |    |  8499500
 1 |  9 |    |  9499500
 2 | 10 |    |    10000
 0 |    |    | 12497500
 1 |    |    | 37497500
 2 |    |    |    10000
   |  0 |  0 |   124750
   |  0 |  1 |   374750
   |  1 |  2 |   624750
   |  1 |  3 |   874750
   |  2 |  4 |  1124750
   |  2 |  5 |  1374750
   |  3 |  6 |  1624750
   |  3 |  7 |  1874750
   |  4 |  8 |  2124750
   |  4 |  9 |  2374750
   |  5 | 10 |  2624750
   |  5 | 11 |  2874750
   |  6 | 12 |  3124750
   |  6 | 13 |  3374750
   |  7 | 14 |  3624750
   |  7 | 15 |  3874750
   |  8 | 16 |  4124750
   |  8 | 17 |  4374750
   |  9 | 18 |  4624750
   |  9 | 19 |  4874750
   | 10 | 20 |    10000
(35 rows)

-- If the query produces a relatively large number of groups in comparison to
-- the number of input rows, one-stage aggregation will be picked.
explain select a, b, d, sum(d) from olap_test group by grouping sets((a, b), (a), (b, d));
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1727.48 rows=10022 width=20)
   ->  Sequence  (cost=0.00..1726.73 rows=3341 width=20)
         ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.16 rows=3334 width=1)
               ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=12)
         ->  Append  (cost=0.00..1295.50 rows=3341 width=20)
               ->  HashAggregate  (cost=0.00..431.99 rows=3334 width=16)
                     Group Key: share0_ref2.b, share0_ref2.d
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.15 rows=3334 width=8)
                           Hash Key: share0_ref2.b, share0_ref2.d
                           ->  Result  (cost=0.00..431.06 rows=3334 width=8)
                                 ->  Shared Scan (share slice:id 2:0)  (cost=0.00..431.06 rows=3334 width=8)
               ->  Finalize HashAggregate  (cost=0.00..431.47 rows=1 width=12)
                     Group Key: share0_ref3.a
                     ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.47 rows=1 width=12)
                           Hash Key: share0_ref3.a
                           ->  Streaming Partial HashAggregate  (cost=0.00..431.47 rows=1 width=12)
                                 Group Key: share0_ref3.a
                                 ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.06 rows=3334 width=8)
               ->  HashAggregate  (cost=0.00..431.91 rows=7 width=16)
                     Group Key: share0_ref4.a, share0_ref4.b
                     ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.10 rows=3334 width=12)
 Optimizer: Pivotal Optimizer (GPORCA)
(22 rows)

-- do not execute this query as it would produce too many tuples.
-- Test that when the second-stage Agg doesn't try to preserve the
-- GROUPINGSET_ID(), used internally in the plan, in the result order. We had
-- a bug like that at one point.
--
-- The notable thing in the plan is that the Sort node has GROUPINGSET_ID() in
-- the Sort Key, as needed for the Finalize GroupAggregate, but in the Motion
-- above the Finalize GroupAggregate, the GROUPINGSET_ID() has been dropped
-- from the Merge Key.
set enable_hashagg=off;
explain select a, b, c, sum(d) from olap_test group by grouping sets((a, b), (a), (b, c)) limit 200;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1726.50 rows=152 width=20)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1726.50 rows=152 width=20)
         ->  Sequence  (cost=0.00..1726.49 rows=51 width=20)
               ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.19 rows=3334 width=1)
                     ->  Seq Scan on olap_test  (cost=0.00..431.08 rows=3334 width=16)
               ->  Append  (cost=0.00..1295.30 rows=51 width=20)
                     ->  Finalize HashAggregate  (cost=0.00..431.92 rows=44 width=16)
                           Group Key: share0_ref2.b, share0_ref2.c
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.91 rows=44 width=16)
                                 Hash Key: share0_ref2.b, share0_ref2.c
                                 ->  Streaming Partial HashAggregate  (cost=0.00..431.91 rows=44 width=16)
                                       Group Key: share0_ref2.b, share0_ref2.c
                                       ->  Shared Scan (share slice:id 2:0)  (cost=0.00..431.10 rows=3334 width=12)
                     ->  Finalize HashAggregate  (cost=0.00..431.47 rows=1 width=12)
                           Group Key: share0_ref3.a
                           ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.47 rows=1 width=12)
                                 Hash Key: share0_ref3.a
                                 ->  Streaming Partial HashAggregate  (cost=0.00..431.47 rows=1 width=12)
                                       Group Key: share0_ref3.a
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.06 rows=3334 width=8)
                     ->  HashAggregate  (cost=0.00..431.91 rows=7 width=16)
                           Group Key: share0_ref4.a, share0_ref4.b
                           ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.10 rows=3334 width=12)
 Optimizer: Pivotal Optimizer (GPORCA)
(24 rows)

reset enable_hashagg;
--
-- Test an optimization in the grouping planner for CREATE TABLE AS, where
-- partial aggregation results are redistributed directly according to the
-- target table's distribution keys, if they're a subset of the GROUP BY
-- columns.
--
create table foo_ctas(a int, b int) distributed randomly;
insert into foo_ctas select g%5, g%2 from generate_series(1, 100) g;
analyze foo_ctas;
explain create table bar_ctas as select * from foo_ctas group by a, b distributed by (b);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.10 rows=6 width=8)
   ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.01 rows=6 width=8)
         Hash Key: b
         ->  GroupAggregate  (cost=0.00..431.01 rows=2 width=8)
               Group Key: a, b
               ->  Sort  (cost=0.00..431.01 rows=2 width=8)
                     Sort Key: a, b
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.01 rows=2 width=8)
                           Hash Key: a, b
                           ->  GroupAggregate  (cost=0.00..431.01 rows=2 width=8)
                                 Group Key: a, b
                                 ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                                       Sort Key: a, b
                                       ->  Seq Scan on foo_ctas  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(15 rows)

create table bar_ctas as select * from foo_ctas group by a, b distributed by (b);
-- Currently, the planner misses this optimization with INSERT, so this
-- needs an extra Redistribute Motion.
explain insert into bar_ctas select * from foo_ctas group by a, b;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Insert on bar_ctas  (cost=0.00..431.10 rows=2 width=8)
   ->  Result  (cost=0.00..431.01 rows=6 width=12)
         ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.01 rows=6 width=8)
               Hash Key: foo_ctas.b
               ->  GroupAggregate  (cost=0.00..431.01 rows=2 width=8)
                     Group Key: foo_ctas.a, foo_ctas.b
                     ->  Sort  (cost=0.00..431.01 rows=2 width=8)
                           Sort Key: foo_ctas.a, foo_ctas.b
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.01 rows=2 width=8)
                                 Hash Key: foo_ctas.a, foo_ctas.b
                                 ->  GroupAggregate  (cost=0.00..431.01 rows=2 width=8)
                                       Group Key: foo_ctas.a, foo_ctas.b
                                       ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                                             Sort Key: foo_ctas.a, foo_ctas.b
                                             ->  Seq Scan on foo_ctas  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(16 rows)

drop table foo_ctas;
drop table bar_ctas;
