create schema alter_ao_part_tables_@amname@;
set search_path="$user",alter_ao_part_tables_@amname@,public;
SET default_table_access_method=@amname@;
BEGIN;
Create table sto_alt_ao_part(a int, b int, c int, d int)
 distributed by (a)
 partition by range(b) subpartition by range(c)
 subpartition template
  (default subpartition subothers, start (1) end(7) every (4))
 (default partition others, start(1) end(5) every(3));

Insert into sto_alt_ao_part values(1,generate_series(1,8),3,4);
Insert into sto_alt_ao_part values(2,3,generate_series(1,9),3);

select count(*) from sto_alt_ao_part;

Create table sto_altap2 (a int, b int, c varchar(20))
 distributed by (a) partition by range(a)
 (default partition others,
  partition p1 start(1) end(5),
  partition p2 start(5) end(10),
  partition p3 start(10) end(15));

Insert into sto_altap2 values(generate_series(1,20), 12, 'A');

select count(*) from sto_altap2;

-- Append optimized tables should not have a valid relfrozenxid in
-- pg_class because per-tuple MVCC information (xmin/xmax) is not
-- present.
select relfrozenxid from pg_class c, pg_namespace n where
       c.relnamespace = n.oid and relname like 'sto_altap2%'
       and n.nspname = 'alter_ao_part_tables_@amname@';
select relfrozenxid from gp_dist_random('pg_class') c, pg_namespace n where
       c.relnamespace = n.oid and relname like 'sto_altap2%'
       and n.nspname = 'alter_ao_part_tables_@amname@';

create table sto_altap3 (col1 bigint, col2 date, col3 text, col4 int)
 distributed randomly
 partition by range(col2) subpartition by list (col3)
 subpartition template (
  default subpartition subothers,
  subpartition sub1 values ('one'),
  subpartition sub2 values ('two'))
 (default partition others, start(date '2008-01-01') end(date '2008-04-30')
  every(interval '1 month'));

insert into sto_altap3(col1, col2, col3) values
 (1, '2008-01-02', 'one'), (2, '2008-01-02', 'two'), (3, '2008-01-02', 'three'),
 (1, '2008-02-03', 'two'), (2, '2008-02-03', 'one'), (3, '2008-02-03', 'three'),
 (1, '2008-03-04', 'three'), (1, '2008-04-04', 'one'), (2, '2008-03-04', 'two');
insert into sto_altap3(col1, col2, col3) values
 (1, '2008-04-05', 'one'), (2, '2008-04-05', 'two'), (3, '2008-04-05', 'three'),
 (1, '2008-05-06', 'one'), (2, '2008-05-06', 'two'), (3, '2008-05-06', 'three');

select count(*) from sto_altap3;

-- Alter table rename default partition
Alter table sto_alt_ao_part rename default partition to new_others;
select * from pg_partition_tree('sto_alt_ao_part');
Insert into sto_alt_ao_part values(1,10,3,4);
Update sto_alt_ao_part set d = -a where b = 10;
select * from sto_alt_ao_part;

-- Alter table rename partition
Alter table sto_altap3 RENAME PARTITION FOR ('2008-01-01') TO jan08;
select * from pg_partition_tree('sto_altap3');
Update sto_altap3 set col4 = 5 where col1 = 1;
select count(*) from sto_altap3;

-- Alter table drop default partition
Alter table sto_alt_ao_part drop default partition;
Update sto_alt_ao_part set d = 5 where b = 4;
select * from sto_alt_ao_part;

-- Alter table drop partition
Alter table sto_alt_ao_part drop partition for (1);
Update sto_alt_ao_part set d = 4 where b = 4;
select * from sto_alt_ao_part;

-- Alter table add heap partition
Alter table sto_alt_ao_part add partition new_p start(6) end(8);
Insert into sto_alt_ao_part values(1,7,3,4);
Update sto_alt_ao_part set d = -a where b = 4 or b = 7;
select * from sto_alt_ao_part;

-- Alter table add ao partition

Alter table sto_alt_ao_part add partition p1 start(9) end(13);
Insert into sto_alt_ao_part values(1,10,3,4);
Update sto_alt_ao_part set d = -a where b = 10;
select * from sto_alt_ao_part;

-- Alter table add co partition

Alter table sto_alt_ao_part add partition p2 start(14) end(17)
with(appendonly=true, orientation=column);
Insert into sto_alt_ao_part values(1,15,3,4);
Update sto_alt_ao_part set d = -a where b = 15;
select * from sto_alt_ao_part order by b,c ;

-- Alter table add default partition
Alter table sto_alt_ao_part add default partition part_others;
Insert into sto_alt_ao_part values(1,25,3,4);
Update sto_alt_ao_part set d = -a where b = 25;
select * from sto_alt_ao_part;

-- Alter table split partition
Alter table sto_altap2 split partition p1 at(3) into
 (partition splitc, partition splitd);

Update sto_altap2 set b = 5 where a = 1 or a = 4;
select * from sto_altap2 order by a;

Alter table sto_alt_ao_part alter partition p1 split partition
 FOR (1) at(2) into (partition splita,partition splitb);
-- Update partitioning key
Update sto_alt_ao_part set d = 0 where b = 10;
select * from sto_alt_ao_part;

-- Alter table split default partition
Alter table sto_altap2 split default partition
 start(15) end(17) into (partition p1, partition others);
Update sto_altap2 set b = 4 where a = 15 or a = 16;
select * from sto_altap2 order by a;

-- Truncate a partitioned table
Truncate table sto_altap2;

-- relfrozenxid should remain invalid after rewrite
select relfrozenxid from pg_class c, pg_namespace n where
       c.relnamespace = n.oid and relname like 'sto_altap2%'
       and n.nspname = 'alter_ao_part_tables_@amname@';
select relfrozenxid from gp_dist_random('pg_class') c, pg_namespace n where
       c.relnamespace = n.oid and relname like 'sto_altap2%'
       and n.nspname = 'alter_ao_part_tables_@amname@';

select * from sto_altap2;
Insert into sto_altap2 values(generate_series(1,20), 12, 'A');
Update sto_altap2 set b = 4 where a = 15 or a = 16;
select count(*) as visible_tuples from sto_altap2;
set gp_select_invisible=true;
select count(*) as all_tuples from sto_altap2;
set gp_select_invisible=false;

-- Check that visimaps were created properly
select distinct a.visimaprelid is not NULL, i.indexrelid is not NULL
 from pg_appendonly a inner join pg_class c on a.relid = c.oid 
 inner join pg_index i on a.visimaprelid = i.indrelid and
 c.relname like 'sto_alt%';

-- Drop partition table, check pg_appendonly
drop table sto_altap2;
select distinct a.visimaprelid is not NULL, i.indexrelid is not NULL
 from pg_appendonly a inner join pg_class c on a.relid = c.oid 
 inner join pg_index i on a.visimaprelid = i.indrelid and
 c.relname like 'sto_altap2%';

-- Validate that the state needed by appendoptimized AM is correctly
-- initialized when the query involves partitioned tables with a
-- subplan.
insert into sto_alt_ao_part values (1,4,4,4);
select * from sto_alt_ao_part;
update sto_alt_ao_part set c = c - 1 where b in (select c from sto_alt_ao_part_1_prt_3);
select * from sto_alt_ao_part;

COMMIT;

-- Vacuum full to test compaction
set gp_select_invisible=true;
select count(*) as all_tuples_before_vacuum from sto_altap3;
set gp_select_invisible=false;
vacuum full sto_altap3;
select count(*) as visible_tuples_post_vacuum from sto_altap3;
set gp_select_invisible=true;
select count(*) as all_tuples_post_vacuum from sto_altap3;
set gp_select_invisible=false;
